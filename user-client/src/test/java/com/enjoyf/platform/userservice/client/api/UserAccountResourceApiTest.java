/*
 * userservice API
 * userservice API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.enjoyf.platform.userservice.client.api;

import com.enjoyf.platform.userservice.client.ApiException;
import com.enjoyf.platform.userservice.client.model.*;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserAccountResourceApi
 */
@Ignore
public class UserAccountResourceApiTest {

    private final UserAccountResourceApi api = new UserAccountResourceApi();

    
    /**
     * bind
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bindUsingPUTTest() throws ApiException {
        BindDTO bindDTO = null;
        AccountDTO response = api.bindUsingPUT(bindDTO);

        // TODO: test validations
    }
    
    /**
     * changePassword
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePasswordUsingPUTTest() throws ApiException {
        String password = null;
        ResponseEntity response = api.changePasswordUsingPUT(password);

        // TODO: test validations
    }
    
    /**
     * createUserAccount
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserAccountUsingPOSTTest() throws ApiException {
        UserAccount userAccount = null;
        UserAccount response = api.createUserAccountUsingPOST(userAccount);

        // TODO: test validations
    }
    
    /**
     * deleteUserAccount
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserAccountUsingDELETETest() throws ApiException {
        Long id = null;
        api.deleteUserAccountUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * getAccountByAccountNoKey
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountByAccountNoKeyUsingGETTest() throws ApiException {
        String accountNo = null;
        String profileKey = null;
        AccountDTO response = api.getAccountByAccountNoKeyUsingGET(accountNo, profileKey);

        // TODO: test validations
    }
    
    /**
     * getAccountByProfileId
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountByProfileIdUsingGETTest() throws ApiException {
        Long profileId = null;
        AccountDTO response = api.getAccountByProfileIdUsingGET(profileId);

        // TODO: test validations
    }
    
    /**
     * getAccountByProfileNo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountByProfileNoUsingGETTest() throws ApiException {
        String profileNo = null;
        AccountDTO response = api.getAccountByProfileNoUsingGET(profileNo);

        // TODO: test validations
    }
    
    /**
     * getAllUserAccounts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllUserAccountsUsingGETTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        List<String> sort = null;
        List<UserAccount> response = api.getAllUserAccountsUsingGET(page, size, sort);

        // TODO: test validations
    }
    
    /**
     * getCurrentAccount
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentAccountUsingGETTest() throws ApiException {
        AccountDTO response = api.getCurrentAccountUsingGET();

        // TODO: test validations
    }
    
    /**
     * getUserAccount
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserAccountUsingGETTest() throws ApiException {
        Long id = null;
        UserAccount response = api.getUserAccountUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * getUserLoginsByAccountNoAndLogindomains
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserLoginsByAccountNoAndLogindomainsUsingGETTest() throws ApiException {
        String accountNo = null;
        List<String> domains = null;
        List<UserLogin> response = api.getUserLoginsByAccountNoAndLogindomainsUsingGET(accountNo, domains);

        // TODO: test validations
    }
    
    /**
     * login
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginUsingPOSTTest() throws ApiException {
        LoginVM loginVM = null;
        AccountDTO response = api.loginUsingPOST(loginVM);

        // TODO: test validations
    }
    
    /**
     * register
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerUsingPOSTTest() throws ApiException {
        RegisterReqDTO registerReqDTO = null;
        AccountDTO response = api.registerUsingPOST(registerReqDTO);

        // TODO: test validations
    }
    
    /**
     * socialLogin
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void socialLoginUsingPOSTTest() throws ApiException {
        SocialAuthDTO socialAuthDTO = null;
        AccountDTO response = api.socialLoginUsingPOST(socialAuthDTO);

        // TODO: test validations
    }
    
    /**
     * unBind
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unBindUsingPUTTest() throws ApiException {
        String accountNo = null;
        String domain = null;
        String profileKey = null;
        Boolean response = api.unBindUsingPUT(accountNo, domain, profileKey);

        // TODO: test validations
    }
    
    /**
     * updateUserAccount
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserAccountUsingPUTTest() throws ApiException {
        UserAccount userAccount = null;
        UserAccount response = api.updateUserAccountUsingPUT(userAccount);

        // TODO: test validations
    }
    
}
