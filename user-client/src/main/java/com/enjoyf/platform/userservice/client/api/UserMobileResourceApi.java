/*
 * userservice API
 * userservice API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.enjoyf.platform.userservice.client.api;

import com.enjoyf.platform.userservice.client.ApiCallback;
import com.enjoyf.platform.userservice.client.ApiClient;
import com.enjoyf.platform.userservice.client.ApiException;
import com.enjoyf.platform.userservice.client.ApiResponse;
import com.enjoyf.platform.userservice.client.Configuration;
import com.enjoyf.platform.userservice.client.Pair;
import com.enjoyf.platform.userservice.client.ProgressRequestBody;
import com.enjoyf.platform.userservice.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserMobileResourceApi {
    private ApiClient apiClient;


    public UserMobileResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserMobileResourceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for mobileExistsUsingGET
     * @param mobile mobile (required)
     * @param profilekey profilekey (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mobileExistsUsingGETCall(String mobile, String profilekey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/user-mobiles/{mobile}/exists"
            .replaceAll("\\{" + "mobile" + "\\}", apiClient.escapeString(mobile.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (profilekey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "profilekey", profilekey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mobileExistsUsingGETValidateBeforeCall(String mobile, String profilekey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mobile' is set
        if (mobile == null) {
            throw new ApiException("Missing the required parameter 'mobile' when calling mobileExistsUsingGET(Async)");
        }
        
        // verify the required parameter 'profilekey' is set
        if (profilekey == null) {
            throw new ApiException("Missing the required parameter 'profilekey' when calling mobileExistsUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = mobileExistsUsingGETCall(mobile, profilekey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * mobileExists
     * 
     * @param mobile mobile (required)
     * @param profilekey profilekey (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean mobileExistsUsingGET(String mobile, String profilekey) throws ApiException {
        ApiResponse<Boolean> resp = mobileExistsUsingGETWithHttpInfo(mobile, profilekey);
        return resp.getData();
    }

    /**
     * mobileExists
     * 
     * @param mobile mobile (required)
     * @param profilekey profilekey (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> mobileExistsUsingGETWithHttpInfo(String mobile, String profilekey) throws ApiException {
        com.squareup.okhttp.Call call = mobileExistsUsingGETValidateBeforeCall(mobile, profilekey, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * mobileExists (asynchronously)
     * 
     * @param mobile mobile (required)
     * @param profilekey profilekey (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mobileExistsUsingGETAsync(String mobile, String profilekey, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mobileExistsUsingGETValidateBeforeCall(mobile, profilekey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendBindCodeUsingPUT
     * @param mobile mobile (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendBindCodeUsingPUTCall(String mobile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/user-mobiles/{mobile}/code"
            .replaceAll("\\{" + "mobile" + "\\}", apiClient.escapeString(mobile.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.TOKEN_NAME };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendBindCodeUsingPUTValidateBeforeCall(String mobile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mobile' is set
        if (mobile == null) {
            throw new ApiException("Missing the required parameter 'mobile' when calling sendBindCodeUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = sendBindCodeUsingPUTCall(mobile, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * sendBindCode
     * 
     * @param mobile mobile (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean sendBindCodeUsingPUT(String mobile) throws ApiException {
        ApiResponse<Boolean> resp = sendBindCodeUsingPUTWithHttpInfo(mobile);
        return resp.getData();
    }

    /**
     * sendBindCode
     * 
     * @param mobile mobile (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> sendBindCodeUsingPUTWithHttpInfo(String mobile) throws ApiException {
        com.squareup.okhttp.Call call = sendBindCodeUsingPUTValidateBeforeCall(mobile, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * sendBindCode (asynchronously)
     * 
     * @param mobile mobile (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendBindCodeUsingPUTAsync(String mobile, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendBindCodeUsingPUTValidateBeforeCall(mobile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendRegisterCodeUsingPUT
     * @param mobile mobile (required)
     * @param profilekey profilekey (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendRegisterCodeUsingPUTCall(String mobile, String profilekey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/user-mobiles/{mobile}/register/code"
            .replaceAll("\\{" + "mobile" + "\\}", apiClient.escapeString(mobile.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (profilekey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "profilekey", profilekey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendRegisterCodeUsingPUTValidateBeforeCall(String mobile, String profilekey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mobile' is set
        if (mobile == null) {
            throw new ApiException("Missing the required parameter 'mobile' when calling sendRegisterCodeUsingPUT(Async)");
        }
        
        // verify the required parameter 'profilekey' is set
        if (profilekey == null) {
            throw new ApiException("Missing the required parameter 'profilekey' when calling sendRegisterCodeUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = sendRegisterCodeUsingPUTCall(mobile, profilekey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * sendRegisterCode
     * 
     * @param mobile mobile (required)
     * @param profilekey profilekey (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean sendRegisterCodeUsingPUT(String mobile, String profilekey) throws ApiException {
        ApiResponse<Boolean> resp = sendRegisterCodeUsingPUTWithHttpInfo(mobile, profilekey);
        return resp.getData();
    }

    /**
     * sendRegisterCode
     * 
     * @param mobile mobile (required)
     * @param profilekey profilekey (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> sendRegisterCodeUsingPUTWithHttpInfo(String mobile, String profilekey) throws ApiException {
        com.squareup.okhttp.Call call = sendRegisterCodeUsingPUTValidateBeforeCall(mobile, profilekey, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * sendRegisterCode (asynchronously)
     * 
     * @param mobile mobile (required)
     * @param profilekey profilekey (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendRegisterCodeUsingPUTAsync(String mobile, String profilekey, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendRegisterCodeUsingPUTValidateBeforeCall(mobile, profilekey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendValidCodeUsingPUT
     * @param mobile mobile (required)
     * @param profilekey profilekey (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendValidCodeUsingPUTCall(String mobile, String profilekey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user-mobiles/{mobile}/valid"
                .replaceAll("\\{" + "mobile" + "\\}", apiClient.escapeString(mobile.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (profilekey != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "profilekey", profilekey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendValidCodeUsingPUTValidateBeforeCall(String mobile, String profilekey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'mobile' is set
        if (mobile == null) {
            throw new ApiException("Missing the required parameter 'mobile' when calling sendValidCodeUsingPUT(Async)");
        }

        // verify the required parameter 'profilekey' is set
        if (profilekey == null) {
            throw new ApiException("Missing the required parameter 'profilekey' when calling sendValidCodeUsingPUT(Async)");
        }


        com.squareup.okhttp.Call call = sendValidCodeUsingPUTCall(mobile, profilekey, progressListener, progressRequestListener);
        return call;





    }

    /**
     * sendValidCode
     *
     * @param mobile mobile (required)
     * @param profilekey profilekey (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean sendValidCodeUsingPUT(String mobile, String profilekey) throws ApiException {
        ApiResponse<Boolean> resp = sendValidCodeUsingPUTWithHttpInfo(mobile, profilekey);
        return resp.getData();
    }

    /**
     * sendValidCode
     *
     * @param mobile mobile (required)
     * @param profilekey profilekey (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> sendValidCodeUsingPUTWithHttpInfo(String mobile, String profilekey) throws ApiException {
        com.squareup.okhttp.Call call = sendValidCodeUsingPUTValidateBeforeCall(mobile, profilekey, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * sendValidCode (asynchronously)
     *
     * @param mobile mobile (required)
     * @param profilekey profilekey (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendValidCodeUsingPUTAsync(String mobile, String profilekey, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendValidCodeUsingPUTValidateBeforeCall(mobile, profilekey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for verifyBindCodeUsingPOST
     * @param mobile mobile (required)
     * @param code code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call verifyBindCodeUsingPOSTCall(String mobile, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/user-mobiles/{mobile}/verfiy"
            .replaceAll("\\{" + "mobile" + "\\}", apiClient.escapeString(mobile.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (code != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "code", code));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { apiClient.TOKEN_NAME };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call verifyBindCodeUsingPOSTValidateBeforeCall(String mobile, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mobile' is set
        if (mobile == null) {
            throw new ApiException("Missing the required parameter 'mobile' when calling verifyBindCodeUsingPOST(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling verifyBindCodeUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = verifyBindCodeUsingPOSTCall(mobile, code, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * verifyBindCode
     * 
     * @param mobile mobile (required)
     * @param code code (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean verifyBindCodeUsingPOST(String mobile, String code) throws ApiException {
        ApiResponse<Boolean> resp = verifyBindCodeUsingPOSTWithHttpInfo(mobile, code);
        return resp.getData();
    }

    /**
     * verifyBindCode
     * 
     * @param mobile mobile (required)
     * @param code code (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> verifyBindCodeUsingPOSTWithHttpInfo(String mobile, String code) throws ApiException {
        com.squareup.okhttp.Call call = verifyBindCodeUsingPOSTValidateBeforeCall(mobile, code, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * verifyBindCode (asynchronously)
     * 
     * @param mobile mobile (required)
     * @param code code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifyBindCodeUsingPOSTAsync(String mobile, String code, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifyBindCodeUsingPOSTValidateBeforeCall(mobile, code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for verifyRegisterBindCodeUsingGET
     * @param mobile mobile (required)
     * @param code code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call verifyRegisterBindCodeUsingGETCall(String mobile, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/user-mobiles/{mobile}/register/verfiy"
            .replaceAll("\\{" + "mobile" + "\\}", apiClient.escapeString(mobile.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (code != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "code", code));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call verifyRegisterBindCodeUsingGETValidateBeforeCall(String mobile, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mobile' is set
        if (mobile == null) {
            throw new ApiException("Missing the required parameter 'mobile' when calling verifyRegisterBindCodeUsingGET(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling verifyRegisterBindCodeUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = verifyRegisterBindCodeUsingGETCall(mobile, code, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * verifyRegisterBindCode
     * 
     * @param mobile mobile (required)
     * @param code code (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean verifyRegisterBindCodeUsingGET(String mobile, String code) throws ApiException {
        ApiResponse<Boolean> resp = verifyRegisterBindCodeUsingGETWithHttpInfo(mobile, code);
        return resp.getData();
    }

    /**
     * verifyRegisterBindCode
     * 
     * @param mobile mobile (required)
     * @param code code (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> verifyRegisterBindCodeUsingGETWithHttpInfo(String mobile, String code) throws ApiException {
        com.squareup.okhttp.Call call = verifyRegisterBindCodeUsingGETValidateBeforeCall(mobile, code, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * verifyRegisterBindCode (asynchronously)
     * 
     * @param mobile mobile (required)
     * @param code code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifyRegisterBindCodeUsingGETAsync(String mobile, String code, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifyRegisterBindCodeUsingGETValidateBeforeCall(mobile, code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
