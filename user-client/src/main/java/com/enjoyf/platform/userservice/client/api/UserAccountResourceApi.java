/*
 * userservice API
 * userservice API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.enjoyf.platform.userservice.client.api;

import com.enjoyf.platform.userservice.client.ApiCallback;
import com.enjoyf.platform.userservice.client.ApiClient;
import com.enjoyf.platform.userservice.client.ApiException;
import com.enjoyf.platform.userservice.client.ApiResponse;
import com.enjoyf.platform.userservice.client.Configuration;
import com.enjoyf.platform.userservice.client.Pair;
import com.enjoyf.platform.userservice.client.ProgressRequestBody;
import com.enjoyf.platform.userservice.client.ProgressResponseBody;

import com.enjoyf.platform.userservice.client.model.*;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserAccountResourceApi {
    private ApiClient apiClient;

    private static final String TOKEN_NAME = "user_jwt";

    public UserAccountResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserAccountResourceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for bindUsingPUT
     * @param bindDTO bindDTO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bindUsingPUTCall(BindDTO bindDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bindDTO;
        
        // create path and map variables
        String localVarPath = "/api/accounts/bind";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { TOKEN_NAME };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bindUsingPUTValidateBeforeCall(BindDTO bindDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bindDTO' is set
        if (bindDTO == null) {
            throw new ApiException("Missing the required parameter 'bindDTO' when calling bindUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = bindUsingPUTCall(bindDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * bind
     * 
     * @param bindDTO bindDTO (required)
     * @return AccountDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountDTO bindUsingPUT(BindDTO bindDTO) throws ApiException {
        ApiResponse<AccountDTO> resp = bindUsingPUTWithHttpInfo(bindDTO);
        return resp.getData();
    }

    /**
     * bind
     * 
     * @param bindDTO bindDTO (required)
     * @return ApiResponse&lt;AccountDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountDTO> bindUsingPUTWithHttpInfo(BindDTO bindDTO) throws ApiException {
        com.squareup.okhttp.Call call = bindUsingPUTValidateBeforeCall(bindDTO, null, null);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * bind (asynchronously)
     * 
     * @param bindDTO bindDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bindUsingPUTAsync(BindDTO bindDTO, final ApiCallback<AccountDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bindUsingPUTValidateBeforeCall(bindDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for changeMobileNoUsingPUT
     * @param newMobileNo newMobileNo (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeMobileNoUsingPUTCall(String newMobileNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/accounts/change_mobile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (newMobileNo != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "newMobileNo", newMobileNo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { TOKEN_NAME };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeMobileNoUsingPUTValidateBeforeCall(String newMobileNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'newMobileNo' is set
        if (newMobileNo == null) {
            throw new ApiException("Missing the required parameter 'newMobileNo' when calling changeMobileNoUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = changeMobileNoUsingPUTCall(newMobileNo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * changeMobileNo
     * 
     * @param newMobileNo newMobileNo (required)
     * @return UserLogin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserLogin changeMobileNoUsingPUT(String newMobileNo) throws ApiException {
        ApiResponse<UserLogin> resp = changeMobileNoUsingPUTWithHttpInfo(newMobileNo);
        return resp.getData();
    }

    /**
     * changeMobileNo
     * 
     * @param newMobileNo newMobileNo (required)
     * @return ApiResponse&lt;UserLogin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserLogin> changeMobileNoUsingPUTWithHttpInfo(String newMobileNo) throws ApiException {
        com.squareup.okhttp.Call call = changeMobileNoUsingPUTValidateBeforeCall(newMobileNo, null, null);
        Type localVarReturnType = new TypeToken<UserLogin>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * changeMobileNo (asynchronously)
     * 
     * @param newMobileNo newMobileNo (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeMobileNoUsingPUTAsync(String newMobileNo, final ApiCallback<UserLogin> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeMobileNoUsingPUTValidateBeforeCall(newMobileNo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserLogin>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for changePasswordUsingPUT
     * @param password password (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changePasswordUsingPUTCall(String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/accounts/change_password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { TOKEN_NAME };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changePasswordUsingPUTValidateBeforeCall(String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling changePasswordUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = changePasswordUsingPUTCall(password, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * changePassword
     * 
     * @param password password (required)
     * @return ResponseEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseEntity changePasswordUsingPUT(String password) throws ApiException {
        ApiResponse<ResponseEntity> resp = changePasswordUsingPUTWithHttpInfo(password);
        return resp.getData();
    }

    /**
     * changePassword
     * 
     * @param password password (required)
     * @return ApiResponse&lt;ResponseEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseEntity> changePasswordUsingPUTWithHttpInfo(String password) throws ApiException {
        com.squareup.okhttp.Call call = changePasswordUsingPUTValidateBeforeCall(password, null, null);
        Type localVarReturnType = new TypeToken<ResponseEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * changePassword (asynchronously)
     * 
     * @param password password (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changePasswordUsingPUTAsync(String password, final ApiCallback<ResponseEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changePasswordUsingPUTValidateBeforeCall(password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for forgetPasswordUsingPUT
     * @param mobileNo mobileNo (required)
     * @param validCode validCode (required)
     * @param password password (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call forgetPasswordUsingPUTCall(String mobileNo, String validCode, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/accounts/forget-password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (mobileNo != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "mobileNo", mobileNo));
        if (validCode != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "validCode", validCode));
        if (password != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call forgetPasswordUsingPUTValidateBeforeCall(String mobileNo, String validCode, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'mobileNo' is set
        if (mobileNo == null) {
            throw new ApiException("Missing the required parameter 'mobileNo' when calling forgetPasswordUsingPUT(Async)");
        }

        // verify the required parameter 'validCode' is set
        if (validCode == null) {
            throw new ApiException("Missing the required parameter 'validCode' when calling forgetPasswordUsingPUT(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling forgetPasswordUsingPUT(Async)");
        }


        com.squareup.okhttp.Call call = forgetPasswordUsingPUTCall(mobileNo, validCode, password, progressListener, progressRequestListener);
        return call;





    }

    /**
     * 忘记密码
     *
     * @param mobileNo mobileNo (required)
     * @param validCode validCode (required)
     * @param password password (required)
     * @return ResponseEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseEntity forgetPasswordUsingPUT(String mobileNo, String validCode, String password) throws ApiException {
        ApiResponse<ResponseEntity> resp = forgetPasswordUsingPUTWithHttpInfo(mobileNo, validCode, password);
        return resp.getData();
    }

    /**
     * 忘记密码
     *
     * @param mobileNo mobileNo (required)
     * @param validCode validCode (required)
     * @param password password (required)
     * @return ApiResponse&lt;ResponseEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseEntity> forgetPasswordUsingPUTWithHttpInfo(String mobileNo, String validCode, String password) throws ApiException {
        com.squareup.okhttp.Call call = forgetPasswordUsingPUTValidateBeforeCall(mobileNo, validCode, password, null, null);
        Type localVarReturnType = new TypeToken<ResponseEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 忘记密码 (asynchronously)
     *
     * @param mobileNo mobileNo (required)
     * @param validCode validCode (required)
     * @param password password (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call forgetPasswordUsingPUTAsync(String mobileNo, String validCode, String password, final ApiCallback<ResponseEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = forgetPasswordUsingPUTValidateBeforeCall(mobileNo, validCode, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUserAccountUsingPOST
     * @param userAccount userAccount (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserAccountUsingPOSTCall(UserAccount userAccount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userAccount;
        
        // create path and map variables
        String localVarPath = "/api/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { TOKEN_NAME };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserAccountUsingPOSTValidateBeforeCall(UserAccount userAccount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userAccount' is set
        if (userAccount == null) {
            throw new ApiException("Missing the required parameter 'userAccount' when calling createUserAccountUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createUserAccountUsingPOSTCall(userAccount, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * createUserAccount
     * 
     * @param userAccount userAccount (required)
     * @return UserAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserAccount createUserAccountUsingPOST(UserAccount userAccount) throws ApiException {
        ApiResponse<UserAccount> resp = createUserAccountUsingPOSTWithHttpInfo(userAccount);
        return resp.getData();
    }

    /**
     * createUserAccount
     * 
     * @param userAccount userAccount (required)
     * @return ApiResponse&lt;UserAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserAccount> createUserAccountUsingPOSTWithHttpInfo(UserAccount userAccount) throws ApiException {
        com.squareup.okhttp.Call call = createUserAccountUsingPOSTValidateBeforeCall(userAccount, null, null);
        Type localVarReturnType = new TypeToken<UserAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createUserAccount (asynchronously)
     * 
     * @param userAccount userAccount (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserAccountUsingPOSTAsync(UserAccount userAccount, final ApiCallback<UserAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserAccountUsingPOSTValidateBeforeCall(userAccount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserAccountUsingDELETE
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserAccountUsingDELETECall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/accounts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserAccountUsingDELETEValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteUserAccountUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteUserAccountUsingDELETECall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deleteUserAccount
     * 
     * @param id id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUserAccountUsingDELETE(Long id) throws ApiException {
        deleteUserAccountUsingDELETEWithHttpInfo(id);
    }

    /**
     * deleteUserAccount
     * 
     * @param id id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserAccountUsingDELETEWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserAccountUsingDELETEValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteUserAccount (asynchronously)
     * 
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAccountUsingDELETEAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserAccountUsingDELETEValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAccountByAccountNoKeyUsingGET
     * @param accountNo accountNo (required)
     * @param profileKey profileKey (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountByAccountNoKeyUsingGETCall(String accountNo, String profileKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/accounts/by";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (accountNo != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "accountNo", accountNo));
        if (profileKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "profileKey", profileKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountByAccountNoKeyUsingGETValidateBeforeCall(String accountNo, String profileKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountNo' is set
        if (accountNo == null) {
            throw new ApiException("Missing the required parameter 'accountNo' when calling getAccountByAccountNoKeyUsingGET(Async)");
        }
        
        // verify the required parameter 'profileKey' is set
        if (profileKey == null) {
            throw new ApiException("Missing the required parameter 'profileKey' when calling getAccountByAccountNoKeyUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAccountByAccountNoKeyUsingGETCall(accountNo, profileKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAccountByAccountNoKey
     * 
     * @param accountNo accountNo (required)
     * @param profileKey profileKey (required)
     * @return AccountDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountDTO getAccountByAccountNoKeyUsingGET(String accountNo, String profileKey) throws ApiException {
        ApiResponse<AccountDTO> resp = getAccountByAccountNoKeyUsingGETWithHttpInfo(accountNo, profileKey);
        return resp.getData();
    }

    /**
     * getAccountByAccountNoKey
     * 
     * @param accountNo accountNo (required)
     * @param profileKey profileKey (required)
     * @return ApiResponse&lt;AccountDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountDTO> getAccountByAccountNoKeyUsingGETWithHttpInfo(String accountNo, String profileKey) throws ApiException {
        com.squareup.okhttp.Call call = getAccountByAccountNoKeyUsingGETValidateBeforeCall(accountNo, profileKey, null, null);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAccountByAccountNoKey (asynchronously)
     * 
     * @param accountNo accountNo (required)
     * @param profileKey profileKey (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountByAccountNoKeyUsingGETAsync(String accountNo, String profileKey, final ApiCallback<AccountDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountByAccountNoKeyUsingGETValidateBeforeCall(accountNo, profileKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountByProfileIdUsingGET
     * @param profileId profileId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountByProfileIdUsingGETCall(Long profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/accounts/profile-id/{profileId}"
            .replaceAll("\\{" + "profileId" + "\\}", apiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountByProfileIdUsingGETValidateBeforeCall(Long profileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getAccountByProfileIdUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAccountByProfileIdUsingGETCall(profileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAccountByProfileId
     * 
     * @param profileId profileId (required)
     * @return AccountDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountDTO getAccountByProfileIdUsingGET(Long profileId) throws ApiException {
        ApiResponse<AccountDTO> resp = getAccountByProfileIdUsingGETWithHttpInfo(profileId);
        return resp.getData();
    }

    /**
     * getAccountByProfileId
     * 
     * @param profileId profileId (required)
     * @return ApiResponse&lt;AccountDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountDTO> getAccountByProfileIdUsingGETWithHttpInfo(Long profileId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountByProfileIdUsingGETValidateBeforeCall(profileId, null, null);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAccountByProfileId (asynchronously)
     * 
     * @param profileId profileId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountByProfileIdUsingGETAsync(Long profileId, final ApiCallback<AccountDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountByProfileIdUsingGETValidateBeforeCall(profileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountByProfileNoUsingGET
     * @param profileNo profileNo (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountByProfileNoUsingGETCall(String profileNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/accounts/profile-no/{profileNo}"
            .replaceAll("\\{" + "profileNo" + "\\}", apiClient.escapeString(profileNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountByProfileNoUsingGETValidateBeforeCall(String profileNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileNo' is set
        if (profileNo == null) {
            throw new ApiException("Missing the required parameter 'profileNo' when calling getAccountByProfileNoUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAccountByProfileNoUsingGETCall(profileNo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAccountByProfileNo
     * 
     * @param profileNo profileNo (required)
     * @return AccountDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountDTO getAccountByProfileNoUsingGET(String profileNo) throws ApiException {
        ApiResponse<AccountDTO> resp = getAccountByProfileNoUsingGETWithHttpInfo(profileNo);
        return resp.getData();
    }

    /**
     * getAccountByProfileNo
     * 
     * @param profileNo profileNo (required)
     * @return ApiResponse&lt;AccountDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountDTO> getAccountByProfileNoUsingGETWithHttpInfo(String profileNo) throws ApiException {
        com.squareup.okhttp.Call call = getAccountByProfileNoUsingGETValidateBeforeCall(profileNo, null, null);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAccountByProfileNo (asynchronously)
     * 
     * @param profileNo profileNo (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountByProfileNoUsingGETAsync(String profileNo, final ApiCallback<AccountDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountByProfileNoUsingGETValidateBeforeCall(profileNo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllUserAccountsUsingGET
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllUserAccountsUsingGETCall(Integer page, Integer size, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllUserAccountsUsingGETValidateBeforeCall(Integer page, Integer size, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllUserAccountsUsingGETCall(page, size, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAllUserAccounts
     * 
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return List&lt;UserAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserAccount> getAllUserAccountsUsingGET(Integer page, Integer size, List<String> sort) throws ApiException {
        ApiResponse<List<UserAccount>> resp = getAllUserAccountsUsingGETWithHttpInfo(page, size, sort);
        return resp.getData();
    }

    /**
     * getAllUserAccounts
     * 
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse&lt;List&lt;UserAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserAccount>> getAllUserAccountsUsingGETWithHttpInfo(Integer page, Integer size, List<String> sort) throws ApiException {
        com.squareup.okhttp.Call call = getAllUserAccountsUsingGETValidateBeforeCall(page, size, sort, null, null);
        Type localVarReturnType = new TypeToken<List<UserAccount>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllUserAccounts (asynchronously)
     * 
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllUserAccountsUsingGETAsync(Integer page, Integer size, List<String> sort, final ApiCallback<List<UserAccount>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllUserAccountsUsingGETValidateBeforeCall(page, size, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserAccount>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCurrentAccountUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCurrentAccountUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/accounts/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { TOKEN_NAME };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCurrentAccountUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getCurrentAccountUsingGETCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getCurrentAccount
     * 
     * @return AccountDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountDTO getCurrentAccountUsingGET() throws ApiException {
        ApiResponse<AccountDTO> resp = getCurrentAccountUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * getCurrentAccount
     * 
     * @return ApiResponse&lt;AccountDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountDTO> getCurrentAccountUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCurrentAccountUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getCurrentAccount (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrentAccountUsingGETAsync(final ApiCallback<AccountDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrentAccountUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserAccountUsingGET
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserAccountUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/accounts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserAccountUsingGETValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserAccountUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserAccountUsingGETCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getUserAccount
     * 
     * @param id id (required)
     * @return UserAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserAccount getUserAccountUsingGET(Long id) throws ApiException {
        ApiResponse<UserAccount> resp = getUserAccountUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * getUserAccount
     * 
     * @param id id (required)
     * @return ApiResponse&lt;UserAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserAccount> getUserAccountUsingGETWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getUserAccountUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<UserAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getUserAccount (asynchronously)
     * 
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserAccountUsingGETAsync(Long id, final ApiCallback<UserAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserAccountUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserLoginsByAccountNoAndLogindomainsUsingGET
     * @param accountNo accountNo (required)
     * @param domains domains (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserLoginsByAccountNoAndLogindomainsUsingGETCall(String accountNo, List<String> domains, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/accounts/logins/{accountNo}"
            .replaceAll("\\{" + "accountNo" + "\\}", apiClient.escapeString(accountNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (domains != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "domains", domains));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserLoginsByAccountNoAndLogindomainsUsingGETValidateBeforeCall(String accountNo, List<String> domains, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountNo' is set
        if (accountNo == null) {
            throw new ApiException("Missing the required parameter 'accountNo' when calling getUserLoginsByAccountNoAndLogindomainsUsingGET(Async)");
        }
        
        // verify the required parameter 'domains' is set
        if (domains == null) {
            throw new ApiException("Missing the required parameter 'domains' when calling getUserLoginsByAccountNoAndLogindomainsUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserLoginsByAccountNoAndLogindomainsUsingGETCall(accountNo, domains, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getUserLoginsByAccountNoAndLogindomains
     * 
     * @param accountNo accountNo (required)
     * @param domains domains (required)
     * @return List&lt;UserLogin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserLogin> getUserLoginsByAccountNoAndLogindomainsUsingGET(String accountNo, List<String> domains) throws ApiException {
        ApiResponse<List<UserLogin>> resp = getUserLoginsByAccountNoAndLogindomainsUsingGETWithHttpInfo(accountNo, domains);
        return resp.getData();
    }

    /**
     * getUserLoginsByAccountNoAndLogindomains
     * 
     * @param accountNo accountNo (required)
     * @param domains domains (required)
     * @return ApiResponse&lt;List&lt;UserLogin&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserLogin>> getUserLoginsByAccountNoAndLogindomainsUsingGETWithHttpInfo(String accountNo, List<String> domains) throws ApiException {
        com.squareup.okhttp.Call call = getUserLoginsByAccountNoAndLogindomainsUsingGETValidateBeforeCall(accountNo, domains, null, null);
        Type localVarReturnType = new TypeToken<List<UserLogin>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getUserLoginsByAccountNoAndLogindomains (asynchronously)
     * 
     * @param accountNo accountNo (required)
     * @param domains domains (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserLoginsByAccountNoAndLogindomainsUsingGETAsync(String accountNo, List<String> domains, final ApiCallback<List<UserLogin>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserLoginsByAccountNoAndLogindomainsUsingGETValidateBeforeCall(accountNo, domains, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserLogin>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for loginUsingPOST
     * @param loginVM loginVM (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loginUsingPOSTCall(LoginVM loginVM, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = loginVM;
        
        // create path and map variables
        String localVarPath = "/api/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loginUsingPOSTValidateBeforeCall(LoginVM loginVM, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loginVM' is set
        if (loginVM == null) {
            throw new ApiException("Missing the required parameter 'loginVM' when calling loginUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = loginUsingPOSTCall(loginVM, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * login
     * 
     * @param loginVM loginVM (required)
     * @return AccountDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountDTO loginUsingPOST(LoginVM loginVM) throws ApiException {
        ApiResponse<AccountDTO> resp = loginUsingPOSTWithHttpInfo(loginVM);
        return resp.getData();
    }

    /**
     * login
     * 
     * @param loginVM loginVM (required)
     * @return ApiResponse&lt;AccountDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountDTO> loginUsingPOSTWithHttpInfo(LoginVM loginVM) throws ApiException {
        com.squareup.okhttp.Call call = loginUsingPOSTValidateBeforeCall(loginVM, null, null);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * login (asynchronously)
     * 
     * @param loginVM loginVM (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loginUsingPOSTAsync(LoginVM loginVM, final ApiCallback<AccountDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loginUsingPOSTValidateBeforeCall(loginVM, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registerUsingPOST
     * @param registerReqDTO registerReqDTO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerUsingPOSTCall(RegisterReqDTO registerReqDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = registerReqDTO;
        
        // create path and map variables
        String localVarPath = "/api/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerUsingPOSTValidateBeforeCall(RegisterReqDTO registerReqDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registerReqDTO' is set
        if (registerReqDTO == null) {
            throw new ApiException("Missing the required parameter 'registerReqDTO' when calling registerUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = registerUsingPOSTCall(registerReqDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * register
     * 
     * @param registerReqDTO registerReqDTO (required)
     * @return AccountDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountDTO registerUsingPOST(RegisterReqDTO registerReqDTO) throws ApiException {
        ApiResponse<AccountDTO> resp = registerUsingPOSTWithHttpInfo(registerReqDTO);
        return resp.getData();
    }

    /**
     * register
     * 
     * @param registerReqDTO registerReqDTO (required)
     * @return ApiResponse&lt;AccountDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountDTO> registerUsingPOSTWithHttpInfo(RegisterReqDTO registerReqDTO) throws ApiException {
        com.squareup.okhttp.Call call = registerUsingPOSTValidateBeforeCall(registerReqDTO, null, null);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * register (asynchronously)
     * 
     * @param registerReqDTO registerReqDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerUsingPOSTAsync(RegisterReqDTO registerReqDTO, final ApiCallback<AccountDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerUsingPOSTValidateBeforeCall(registerReqDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for socialLoginUsingPOST
     * @param socialAuthDTO socialAuthDTO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call socialLoginUsingPOSTCall(SocialAuthDTO socialAuthDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = socialAuthDTO;
        
        // create path and map variables
        String localVarPath = "/api/accounts/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call socialLoginUsingPOSTValidateBeforeCall(SocialAuthDTO socialAuthDTO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registerReqDTO' is set
        if (socialAuthDTO == null) {
            throw new ApiException("Missing the required parameter 'registerReqDTO' when calling socialLoginUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = socialLoginUsingPOSTCall(socialAuthDTO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * socialLogin
     * 
     * @param socialAuthDTO socialAuthDTO (required)
     * @return AccountDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountDTO socialLoginUsingPOST(SocialAuthDTO socialAuthDTO) throws ApiException {
        ApiResponse<AccountDTO> resp = socialLoginUsingPOSTWithHttpInfo(socialAuthDTO);
        return resp.getData();
    }

    /**
     * socialLogin
     * 
     * @param socialAuthDTO socialAuthDTO (required)
     * @return ApiResponse&lt;AccountDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountDTO> socialLoginUsingPOSTWithHttpInfo(SocialAuthDTO socialAuthDTO) throws ApiException {
        com.squareup.okhttp.Call call = socialLoginUsingPOSTValidateBeforeCall(socialAuthDTO, null, null);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * socialLogin (asynchronously)
     * 
     * @param socialAuthDTO socialAuthDTO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call socialLoginUsingPOSTAsync(SocialAuthDTO socialAuthDTO, final ApiCallback<AccountDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = socialLoginUsingPOSTValidateBeforeCall(socialAuthDTO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unBindUsingPUT
     * @param accountNo accountNo (required)
     * @param domain domain (required)
     * @param profileKey profileKey (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unBindUsingPUTCall(String accountNo, String domain, String profileKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/accounts/unbind";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (accountNo != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "accountNo", accountNo));
        if (domain != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "domain", domain));
        if (profileKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "profileKey", profileKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { TOKEN_NAME };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unBindUsingPUTValidateBeforeCall(String accountNo, String domain, String profileKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountNo' is set
        if (accountNo == null) {
            throw new ApiException("Missing the required parameter 'accountNo' when calling unBindUsingPUT(Async)");
        }
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling unBindUsingPUT(Async)");
        }
        
        // verify the required parameter 'profileKey' is set
        if (profileKey == null) {
            throw new ApiException("Missing the required parameter 'profileKey' when calling unBindUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = unBindUsingPUTCall(accountNo, domain, profileKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * unBind
     * 
     * @param accountNo accountNo (required)
     * @param domain domain (required)
     * @param profileKey profileKey (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean unBindUsingPUT(String accountNo, String domain, String profileKey) throws ApiException {
        ApiResponse<Boolean> resp = unBindUsingPUTWithHttpInfo(accountNo, domain, profileKey);
        return resp.getData();
    }

    /**
     * unBind
     * 
     * @param accountNo accountNo (required)
     * @param domain domain (required)
     * @param profileKey profileKey (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> unBindUsingPUTWithHttpInfo(String accountNo, String domain, String profileKey) throws ApiException {
        com.squareup.okhttp.Call call = unBindUsingPUTValidateBeforeCall(accountNo, domain, profileKey, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * unBind (asynchronously)
     * 
     * @param accountNo accountNo (required)
     * @param domain domain (required)
     * @param profileKey profileKey (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unBindUsingPUTAsync(String accountNo, String domain, String profileKey, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unBindUsingPUTValidateBeforeCall(accountNo, domain, profileKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUserAccountUsingPUT
     * @param userAccount userAccount (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserAccountUsingPUTCall(UserAccount userAccount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userAccount;
        
        // create path and map variables
        String localVarPath = "/api/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { TOKEN_NAME };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserAccountUsingPUTValidateBeforeCall(UserAccount userAccount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userAccount' is set
        if (userAccount == null) {
            throw new ApiException("Missing the required parameter 'userAccount' when calling updateUserAccountUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateUserAccountUsingPUTCall(userAccount, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * updateUserAccount
     * 
     * @param userAccount userAccount (required)
     * @return UserAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserAccount updateUserAccountUsingPUT(UserAccount userAccount) throws ApiException {
        ApiResponse<UserAccount> resp = updateUserAccountUsingPUTWithHttpInfo(userAccount);
        return resp.getData();
    }

    /**
     * updateUserAccount
     * 
     * @param userAccount userAccount (required)
     * @return ApiResponse&lt;UserAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserAccount> updateUserAccountUsingPUTWithHttpInfo(UserAccount userAccount) throws ApiException {
        com.squareup.okhttp.Call call = updateUserAccountUsingPUTValidateBeforeCall(userAccount, null, null);
        Type localVarReturnType = new TypeToken<UserAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateUserAccount (asynchronously)
     * 
     * @param userAccount userAccount (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserAccountUsingPUTAsync(UserAccount userAccount, final ApiCallback<UserAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserAccountUsingPUTValidateBeforeCall(userAccount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
