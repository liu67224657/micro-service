/*
 * userservice API
 * userservice API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.enjoyf.platform.userservice.client.api;

import com.enjoyf.platform.userservice.client.ApiCallback;
import com.enjoyf.platform.userservice.client.ApiClient;
import com.enjoyf.platform.userservice.client.ApiException;
import com.enjoyf.platform.userservice.client.ApiResponse;
import com.enjoyf.platform.userservice.client.Configuration;
import com.enjoyf.platform.userservice.client.Pair;
import com.enjoyf.platform.userservice.client.ProgressRequestBody;
import com.enjoyf.platform.userservice.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.enjoyf.platform.userservice.client.model.UserProfile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserProfileResourceApi {

    private static final String TOKEN_NAME = "user_jwt";

    private ApiClient apiClient;

    public UserProfileResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserProfileResourceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createUserProfileUsingPOST
     * @param userProfile userProfile (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserProfileUsingPOSTCall(UserProfile userProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userProfile;
        
        // create path and map variables
        String localVarPath = "/api/user-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserProfileUsingPOSTValidateBeforeCall(UserProfile userProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userProfile' is set
        if (userProfile == null) {
            throw new ApiException("Missing the required parameter 'userProfile' when calling createUserProfileUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createUserProfileUsingPOSTCall(userProfile, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * createUserProfile
     * 
     * @param userProfile userProfile (required)
     * @return UserProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfile createUserProfileUsingPOST(UserProfile userProfile) throws ApiException {
        ApiResponse<UserProfile> resp = createUserProfileUsingPOSTWithHttpInfo(userProfile);
        return resp.getData();
    }

    /**
     * createUserProfile
     * 
     * @param userProfile userProfile (required)
     * @return ApiResponse&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfile> createUserProfileUsingPOSTWithHttpInfo(UserProfile userProfile) throws ApiException {
        com.squareup.okhttp.Call call = createUserProfileUsingPOSTValidateBeforeCall(userProfile, null, null);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createUserProfile (asynchronously)
     * 
     * @param userProfile userProfile (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserProfileUsingPOSTAsync(UserProfile userProfile, final ApiCallback<UserProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserProfileUsingPOSTValidateBeforeCall(userProfile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUserProfileUsingDELETE
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserProfileUsingDELETECall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/user-profiles/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserProfileUsingDELETEValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteUserProfileUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteUserProfileUsingDELETECall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deleteUserProfile
     * 
     * @param id id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUserProfileUsingDELETE(Long id) throws ApiException {
        deleteUserProfileUsingDELETEWithHttpInfo(id);
    }

    /**
     * deleteUserProfile
     * 
     * @param id id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserProfileUsingDELETEWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserProfileUsingDELETEValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteUserProfile (asynchronously)
     * 
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserProfileUsingDELETEAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserProfileUsingDELETEValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllUserProfilesUsingGET
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllUserProfilesUsingGETCall(Integer page, Integer size, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/user-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllUserProfilesUsingGETValidateBeforeCall(Integer page, Integer size, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAllUserProfilesUsingGETCall(page, size, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAllUserProfiles
     * 
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return List&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserProfile> getAllUserProfilesUsingGET(Integer page, Integer size, List<String> sort) throws ApiException {
        ApiResponse<List<UserProfile>> resp = getAllUserProfilesUsingGETWithHttpInfo(page, size, sort);
        return resp.getData();
    }

    /**
     * getAllUserProfiles
     * 
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse&lt;List&lt;UserProfile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserProfile>> getAllUserProfilesUsingGETWithHttpInfo(Integer page, Integer size, List<String> sort) throws ApiException {
        com.squareup.okhttp.Call call = getAllUserProfilesUsingGETValidateBeforeCall(page, size, sort, null, null);
        Type localVarReturnType = new TypeToken<List<UserProfile>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllUserProfiles (asynchronously)
     * 
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllUserProfilesUsingGETAsync(Integer page, Integer size, List<String> sort, final ApiCallback<List<UserProfile>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllUserProfilesUsingGETValidateBeforeCall(page, size, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserProfile>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchAllUserProfilesUsingGET
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param nick nick (optional)
     * @param inOrNot inOrNot (optional)
     * @param profileNos profileNos (optional)
     * @param startTime startTime (optional)
     * @param endTime endTime (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchAllUserProfilesUsingGETCall(Integer page, Integer size, String nick, String inOrNot, String profileNos, String startTime, String endTime, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user-profiles/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (size != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (nick != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "nick", nick));
        if (inOrNot != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "inOrNot", inOrNot));
        if (profileNos != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "profileNos", profileNos));
        if (startTime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));
        if (sort != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchAllUserProfilesUsingGETValidateBeforeCall(Integer page, Integer size, String nick, String inOrNot, String profileNos, String startTime, String endTime, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = searchAllUserProfilesUsingGETCall(page, size, nick, inOrNot, profileNos, startTime, endTime, sort, progressListener, progressRequestListener);
        return call;





    }

    /**
     * searchAllUserProfiles
     *
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param nick nick (optional)
     * @param inOrNot inOrNot (optional)
     * @param profileNos profileNos (optional)
     * @param startTime startTime (optional)
     * @param endTime endTime (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return List&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserProfile> searchAllUserProfilesUsingGET(Integer page, Integer size, String nick, String inOrNot, String profileNos, String startTime, String endTime, List<String> sort) throws ApiException {
        ApiResponse<List<UserProfile>> resp = searchAllUserProfilesUsingGETWithHttpInfo(page, size, nick, inOrNot, profileNos, startTime, endTime, sort);
        return resp.getData();
    }

    /**
     * searchAllUserProfiles
     *
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param nick nick (optional)
     * @param inOrNot inOrNot (optional)
     * @param profileNos profileNos (optional)
     * @param startTime startTime (optional)
     * @param endTime endTime (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse&lt;List&lt;UserProfile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserProfile>> searchAllUserProfilesUsingGETWithHttpInfo(Integer page, Integer size, String nick, String inOrNot, String profileNos, String startTime, String endTime, List<String> sort) throws ApiException {
        com.squareup.okhttp.Call call = searchAllUserProfilesUsingGETValidateBeforeCall(page, size, nick, inOrNot, profileNos, startTime, endTime, sort, null, null);
        Type localVarReturnType = new TypeToken<List<UserProfile>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * searchAllUserProfiles (asynchronously)
     *
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param nick nick (optional)
     * @param inOrNot inOrNot (optional)
     * @param profileNos profileNos (optional)
     * @param startTime startTime (optional)
     * @param endTime endTime (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAllUserProfilesUsingGETAsync(Integer page, Integer size, String nick, String inOrNot, String profileNos, String startTime, String endTime, List<String> sort, final ApiCallback<List<UserProfile>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchAllUserProfilesUsingGETValidateBeforeCall(page, size, nick, inOrNot, profileNos, startTime, endTime, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserProfile>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProfileByLikeNickUsingGET
     * @param nick nick (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProfileByLikeNickUsingGETCall(String nick, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/user-profiles/by";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (nick != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "nick", nick));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProfileByLikeNickUsingGETValidateBeforeCall(String nick, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nick' is set
        if (nick == null) {
            throw new ApiException("Missing the required parameter 'nick' when calling getProfileByLikeNickUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getProfileByLikeNickUsingGETCall(nick, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getProfileByLikeNick
     * 
     * @param nick nick (required)
     * @return List&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserProfile> getProfileByLikeNickUsingGET(String nick) throws ApiException {
        ApiResponse<List<UserProfile>> resp = getProfileByLikeNickUsingGETWithHttpInfo(nick);
        return resp.getData();
    }

    /**
     * getProfileByLikeNick
     * 
     * @param nick nick (required)
     * @return ApiResponse&lt;List&lt;UserProfile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserProfile>> getProfileByLikeNickUsingGETWithHttpInfo(String nick) throws ApiException {
        com.squareup.okhttp.Call call = getProfileByLikeNickUsingGETValidateBeforeCall(nick, null, null);
        Type localVarReturnType = new TypeToken<List<UserProfile>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getProfileByLikeNick (asynchronously)
     * 
     * @param nick nick (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProfileByLikeNickUsingGETAsync(String nick, final ApiCallback<List<UserProfile>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProfileByLikeNickUsingGETValidateBeforeCall(nick, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserProfile>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getProfileByNickUsingGET
     * @param nick nick (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProfileByNickUsingGETCall(String nick, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user-profiles/nick";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (nick != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "nick", nick));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProfileByNickUsingGETValidateBeforeCall(String nick, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'nick' is set
        if (nick == null) {
            throw new ApiException("Missing the required parameter 'nick' when calling getProfileByNickUsingGET(Async)");
        }


        com.squareup.okhttp.Call call = getProfileByNickUsingGETCall(nick, progressListener, progressRequestListener);
        return call;





    }

    /**
     * getProfileByNick
     *
     * @param nick nick (required)
     * @return UserProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfile getProfileByNickUsingGET(String nick) throws ApiException {
        ApiResponse<UserProfile> resp = getProfileByNickUsingGETWithHttpInfo(nick);
        return resp.getData();
    }

    /**
     * getProfileByNick
     *
     * @param nick nick (required)
     * @return ApiResponse&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfile> getProfileByNickUsingGETWithHttpInfo(String nick) throws ApiException {
        com.squareup.okhttp.Call call = getProfileByNickUsingGETValidateBeforeCall(nick, null, null);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getProfileByNick (asynchronously)
     *
     * @param nick nick (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProfileByNickUsingGETAsync(String nick, final ApiCallback<UserProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProfileByNickUsingGETValidateBeforeCall(nick, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for getProfilesByIdsUsingGET
     * @param ids ids (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProfilesByIdsUsingGETCall(List<Long> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/user-profiles/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProfilesByIdsUsingGETValidateBeforeCall(List<Long> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getProfilesByIdsUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getProfilesByIdsUsingGETCall(ids, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getProfilesByIds
     * 
     * @param ids ids (required)
     * @return List&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserProfile> getProfilesByIdsUsingGET(List<Long> ids) throws ApiException {
        ApiResponse<List<UserProfile>> resp = getProfilesByIdsUsingGETWithHttpInfo(ids);
        return resp.getData();
    }

    /**
     * getProfilesByIds
     * 
     * @param ids ids (required)
     * @return ApiResponse&lt;List&lt;UserProfile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserProfile>> getProfilesByIdsUsingGETWithHttpInfo(List<Long> ids) throws ApiException {
        com.squareup.okhttp.Call call = getProfilesByIdsUsingGETValidateBeforeCall(ids, null, null);
        Type localVarReturnType = new TypeToken<List<UserProfile>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getProfilesByIds (asynchronously)
     * 
     * @param ids ids (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProfilesByIdsUsingGETAsync(List<Long> ids, final ApiCallback<List<UserProfile>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProfilesByIdsUsingGETValidateBeforeCall(ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserProfile>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProfilesByProfileNosUsingGET
     * @param profilenos profilenos (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProfilesByProfileNosUsingGETCall(List<String> profilenos, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/user-profiles/profileno";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (profilenos != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "profilenos", profilenos));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProfilesByProfileNosUsingGETValidateBeforeCall(List<String> profilenos, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profilenos' is set
        if (profilenos == null) {
            throw new ApiException("Missing the required parameter 'profilenos' when calling getProfilesByProfileNosUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getProfilesByProfileNosUsingGETCall(profilenos, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getProfilesByProfileNos
     * 
     * @param profilenos profilenos (required)
     * @return List&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserProfile> getProfilesByProfileNosUsingGET(List<String> profilenos) throws ApiException {
        ApiResponse<List<UserProfile>> resp = getProfilesByProfileNosUsingGETWithHttpInfo(profilenos);
        return resp.getData();
    }

    /**
     * getProfilesByProfileNos
     * 
     * @param profilenos profilenos (required)
     * @return ApiResponse&lt;List&lt;UserProfile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserProfile>> getProfilesByProfileNosUsingGETWithHttpInfo(List<String> profilenos) throws ApiException {
        com.squareup.okhttp.Call call = getProfilesByProfileNosUsingGETValidateBeforeCall(profilenos, null, null);
        Type localVarReturnType = new TypeToken<List<UserProfile>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getProfilesByProfileNos (asynchronously)
     * 
     * @param profilenos profilenos (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProfilesByProfileNosUsingGETAsync(List<String> profilenos, final ApiCallback<List<UserProfile>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProfilesByProfileNosUsingGETValidateBeforeCall(profilenos, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserProfile>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserProfileByProfileNoUsingGET
     * @param profileNo profileNo (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserProfileByProfileNoUsingGETCall(String profileNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/user-profiles/profileno/{profileNo}"
            .replaceAll("\\{" + "profileNo" + "\\}", apiClient.escapeString(profileNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserProfileByProfileNoUsingGETValidateBeforeCall(String profileNo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileNo' is set
        if (profileNo == null) {
            throw new ApiException("Missing the required parameter 'profileNo' when calling getUserProfileByProfileNoUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserProfileByProfileNoUsingGETCall(profileNo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getUserProfileByProfileNo
     * 
     * @param profileNo profileNo (required)
     * @return UserProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfile getUserProfileByProfileNoUsingGET(String profileNo) throws ApiException {
        ApiResponse<UserProfile> resp = getUserProfileByProfileNoUsingGETWithHttpInfo(profileNo);
        return resp.getData();
    }

    /**
     * getUserProfileByProfileNo
     * 
     * @param profileNo profileNo (required)
     * @return ApiResponse&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfile> getUserProfileByProfileNoUsingGETWithHttpInfo(String profileNo) throws ApiException {
        com.squareup.okhttp.Call call = getUserProfileByProfileNoUsingGETValidateBeforeCall(profileNo, null, null);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getUserProfileByProfileNo (asynchronously)
     * 
     * @param profileNo profileNo (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserProfileByProfileNoUsingGETAsync(String profileNo, final ApiCallback<UserProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserProfileByProfileNoUsingGETValidateBeforeCall(profileNo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserProfileUsingGET
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserProfileUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/user-profiles/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserProfileUsingGETValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserProfileUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserProfileUsingGETCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getUserProfile
     * 
     * @param id id (required)
     * @return UserProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfile getUserProfileUsingGET(Long id) throws ApiException {
        ApiResponse<UserProfile> resp = getUserProfileUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * getUserProfile
     * 
     * @param id id (required)
     * @return ApiResponse&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfile> getUserProfileUsingGETWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getUserProfileUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getUserProfile (asynchronously)
     * 
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserProfileUsingGETAsync(Long id, final ApiCallback<UserProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserProfileUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUserProfileUsingPUT
     * @param userProfile userProfile (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserProfileUsingPUTCall(UserProfile userProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userProfile;
        
        // create path and map variables
        String localVarPath = "/api/user-profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserProfileUsingPUTValidateBeforeCall(UserProfile userProfile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userProfile' is set
        if (userProfile == null) {
            throw new ApiException("Missing the required parameter 'userProfile' when calling updateUserProfileUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateUserProfileUsingPUTCall(userProfile, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * updateUserProfile
     * 
     * @param userProfile userProfile (required)
     * @return UserProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfile updateUserProfileUsingPUT(UserProfile userProfile) throws ApiException {
        ApiResponse<UserProfile> resp = updateUserProfileUsingPUTWithHttpInfo(userProfile);
        return resp.getData();
    }

    /**
     * updateUserProfile
     * 
     * @param userProfile userProfile (required)
     * @return ApiResponse&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfile> updateUserProfileUsingPUTWithHttpInfo(UserProfile userProfile) throws ApiException {
        com.squareup.okhttp.Call call = updateUserProfileUsingPUTValidateBeforeCall(userProfile, null, null);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateUserProfile (asynchronously)
     * 
     * @param userProfile userProfile (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserProfileUsingPUTAsync(UserProfile userProfile, final ApiCallback<UserProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserProfileUsingPUTValidateBeforeCall(userProfile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNickUsingPUT
     * @param nick nick (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNickUsingPUTCall(String nick, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/user-profiles/nick/{nick}"
                .replaceAll("\\{" + "nick" + "\\}", apiClient.escapeString(nick.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { TOKEN_NAME };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNickUsingPUTValidateBeforeCall(String nick, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'nick' is set
        if (nick == null) {
            throw new ApiException("Missing the required parameter 'nick' when calling updateNickUsingPUT(Async)");
        }


        com.squareup.okhttp.Call call = updateNickUsingPUTCall(nick, progressListener, progressRequestListener);
        return call;





    }

    /**
     * updateNick
     *
     * @param nick nick (required)
     * @return UserProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfile updateNickUsingPUT(String nick) throws ApiException {
        ApiResponse<UserProfile> resp = updateNickUsingPUTWithHttpInfo(nick);
        return resp.getData();
    }

    /**
     * updateNick
     *
     * @param nick nick (required)
     * @return ApiResponse&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfile> updateNickUsingPUTWithHttpInfo(String nick) throws ApiException {
        com.squareup.okhttp.Call call = updateNickUsingPUTValidateBeforeCall(nick, null, null);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateNick (asynchronously)
     *
     * @param nick nick (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNickUsingPUTAsync(String nick, final ApiCallback<UserProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNickUsingPUTValidateBeforeCall(nick, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
